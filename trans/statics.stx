module statics

imports

  signatures/statixtest-sig

signature
  relations
    id : string -> Node

rules

  programOk : Start

  programOk(Program(_, nodes, _)) :- {s_program}
    new s_program,
    nodesOk(s_program, nodes).

  nodeOk : scope * Node
  nodesOk maps nodeOk(*, list(*))
  nodeOk(s, d@Declaration(id, body)) :-
    declareId(s, id, d),
    atermOk(s, body).
  nodeOk(s, sc@Scope(id1, id2, decls)) :-
    declareId(s, id1, sc),
    nodeDeclarationsOk(s, decls),
    try {id1 == id2} | warning "name mismatch" @id2.
  nodeOk(s, ps@PrettyScope(id, decls)) :-
    declareId(s, id, ps),
    nodeDeclarationsOk(s, decls).

  nodeDeclarationOk : scope * NodeDeclaration
  nodeDeclarationsOk maps nodeDeclarationOk(*, list(*))
  nodeDeclarationOk(s, NodeDeclaration(_, _, decls)) :-
    declarationsOk(s, decls).

  declarationOk : scope * Decl
  declarationsOk maps declarationOk(*, list(*))
  declarationOk(s, ATerm(aterm)) :- atermOk(s, aterm).
  declarationOk(s, Ref(node_id)) :- resolveUniqueId(s, getId(node_id)) == _.
  
    getId : NodeId -> string
    getId(DeclId(id)) = id.
    getId(ScopeId(id)) = id.

  atermOk : scope * ATerm
  atermsOk maps atermOk(*, list(*))
  atermOk(s, String(_)).
  atermOk(s, Int(_)).
  atermOk(s, ScopeRef(id)) :- resolveUniqueId(s, id) == _.
  atermOk(s, List(elems)) :- atermsOk(s, elems).
  atermOk(s, Tuple(elems)) :- atermsOk(s, elems).
  atermOk(s, Constructor(name, args)) :- atermsOk(s, args).

rules // declaration and resolution

  declareId : scope * string * Node
  declareId(s, id, node) :-
    !id[id, node] in s,
    resolveId(s, id) == [_] | error $[duplicate id [id]].

  resolveId : scope * string -> list((string * Node))
  resolveId(s, id) = getNodes(occs) :-
    query id
      filter e and {id' :- id' == id}
      in s |-> occs.

    getNode : (path * (string * Node)) -> (string * Node)
    getNodes maps getNode(list(*)) = list(*)
    getNode((_, node)) = node.

  resolveUniqueId : scope * string -> Node
  resolveUniqueId(s, id) = node :- {id_orig}
    resolveId(s, id) == [(id_orig, node)] | error $[Cannot resolve [id]] @id,
    @id.ref := id_orig.
