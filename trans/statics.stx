module statics

imports

  signatures/statixtest-sig

signature
  relations
    snopes : SCOPEID -> Scope

rules

  programOk : Start

  programOk(StxResult(_, scope_graph, _)) :- {s_root}
    new s_root,
    scopeGraphOk(s_root, scope_graph).
  programOk(ScopeGraph2Start(scope_graph)) :- {s_root}
    new s_root,
    scopeGraphOk(s_root, scope_graph).

  scopeGraphOk : scope * ScopeGraph
  scopeGraphOk(s, ScopeGraph(scopes)) :-
    scopesOk(s, scopes).

  scopeOk : scope * Scope
  scopesOk maps scopeOk(*, list(*))
  scopeOk(s, sc@Scope(id, elems)) :-
    declareScope(s, id, sc),
    scopeElementsOk(s, elems).

  scopeElementOk : scope * ScopeElement
  scopeElementsOk maps scopeElementOk(*, list(*))
  scopeElementOk(s, ScopeElement(_, decls)) :-
    declarationsOk(s, decls).

  declarationOk : scope * Declaration
  declarationsOk maps declarationOk(*, list(*))
  declarationOk(s, Declaration(_, aterm)) :- atermsOk(s, aterm).
  
  atermOk : scope * ATerm
  atermsOk maps atermOk(*, list(*))
  atermOk(s, String(_)).
  atermOk(s, Int(_)).
  atermOk(s, ScopeRef(Resolved(id))) :- resolveUniqueScope(s, id) == _.
  atermOk(s, ScopeRef(Unresolved(id))).
  atermOk(s, List(elems)) :- atermsOk(s, elems).
  atermOk(s, Tuple(elems)) :- atermsOk(s, elems).
  atermOk(s, Constructor(name, args)) :- atermsOk(s, args).

rules // declaration and resolution

  declareScope : scope * SCOPEID * Scope
  declareScope(s, id, snope) :-
    !snopes[id, snope] in s,
    resolveScope(s, id) == [_] | error $[duplicate scope id [id]].

  resolveScope : scope * SCOPEID -> list((SCOPEID * Scope))
  resolveScope(s, id) = getScopes(occs) :-
    query snopes
      filter e and {id' :- id' == id}
      in s |-> occs.

    getScope : (path * (SCOPEID * Scope)) -> (SCOPEID * Scope)
    getScopes maps getScope(list(*)) = list(*)
    getScope((_, snope)) = snope.

  resolveUniqueScope : scope * SCOPEID -> Scope
  resolveUniqueScope(s, id) = snope :- {id_orig}
    resolveScope(s, id) == [(id_orig, snope)] | error $[Cannot resolve scope [id]] @id,
    @id.ref := id_orig.
