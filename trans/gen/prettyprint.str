module gen/prettyprint

imports

  signatures/statixtest-sig
  pp

rules

  editor-merge-decls-new-file: (_, _, ast, path, project-path) -> (filename, result)
    with
      filename    := <guarantee-extension(|"pp.stxresult")> path
    ; transformed := <merge-decls> ast
    ; result      := <prettyprint> transformed

  editor-merge-decls-same-file: (_, _, ast, path, project-path) -> (path, result)
    with
      transformed := <merge-decls> ast
    ; result      := <prettyprint> transformed

  merge-decls: Program(substitutions, nodes, rest) -> Program(substitutions, <merge-nodes> nodes, rest)
  prettyprint = pp-statixtest-string

  merge-nodes: nodes -> result
    with
      result := <map-param(inline-scope-decls|<filter(?Declaration(_, _))> nodes)> <filter(not(?Declaration(_, _)))> nodes

  inline-scope-decls(|nodes): Scope(name, _, decls)    -> PrettyScope(name, <map-param(inline-node-decl|nodes)> decls)
  inline-scope-decls(|nodes): PrettyScope(name, decls) -> PrettyScope(name, <map-param(inline-node-decl|nodes)> decls)

  inline-node-decl(|nodes): NodeDeclaration(path, name, decls) -> NodeDeclaration(path, name, <map-param(decl-ref-to-direct|nodes)> decls)

  decl-ref-to-direct(|nodes): decl@ATerm(_) -> decl
  decl-ref-to-direct(|nodes): decl@Ref(ScopeId(_)) -> decl
  decl-ref-to-direct(|nodes): Ref(DeclId(name)) -> result
    with
      result := ATerm(<getfirst-param(node-decl-matches-id|name)> nodes)

  node-decl-matches-id(|name1): Declaration(name2, body) -> body where <equal-ignore-annos> (name1, name2)

rules // util

  map-param(s|arg) = 
    rec x([] + [s(|arg) | x])

  getfirst-param(s|arg) = rec x(Hd; s(|arg) <+ Tl; x)

  // Compares two terms for equality, ignoring annotations
  equal-ignore-annos: (name1, name2) -> <equal> (<strip-annos> name1, <strip-annos> name2)
